<!DOCTYPE html
    PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>

<head>
    <title>DoMenu Menuing Software</title>
    <meta http-equiv="content-type" content="text/html;charset=iso-8859-1">
</head>

<body>

    <h1>DoMenu Menuing Software</h1>
    <p>
        This is an edited and abbrieviated version of
        <a href="domenu.doc">domenu.doc</a>.
    </p>

    <p>
        DoMenu requires the use of 3 files: DOMENU.EXE, DMENU.BAT and a
        menu script. DoMenu is started with the following command:
    </p>
    <code>DMENU MENUSCRIPT[.MNU]</code>
    <p>
        DMENU.BAT may be edited to fit your needs, however the <i>t</i>
        environment variable is required and must point to a temporary file.
        The temporary file must have a three-letter extension that does not end
        with the letter 'T'.
    </p>

    <p>
        The following commands may be used in the menu script:
    </p>


    <pre>
EXTERNAL COMMANDS           PARSING COMMANDS           EXECUTION COMMANDS
<a href="#display">#display</a>                    <a href="#menutitle">%MenuTitle</a>                 <a href="#ifexec">#if</a>
<a href="#fn">#f1...#f10</a>                  <a href="#semicolon">;</a> (semi-colon)             <a href="#ifmemberexec">#if_member</a>
<a href="#key">#key</a>                        <a href="#comments">#comments</a>                  <a href="#ifusernameexec">#if_username</a>
<a href="#timer">#timer</a>                      <a href="#nocomments">#nocomments</a>                <a href="#endifexec">#endif</a>
<a href="#savermessage">#saver message</a>              <a href="#if">#if</a>                        <a href="#elseexec">#else</a>
<a href="#headermessage">#header message</a>             <a href="#ifmember">#if_member</a>                 <a href="#displayexec">#display</a>
<a href="#headerpalette">#header palette</a>             <a href="#ifusername">#if_username</a>               <a href="#ask1exec">#ask</a>
<a href="#errorpalette">#error palette</a>              <a href="#endif">#endif</a>                     <a href="#ask2exec">#ask</a>
<a href="#messagepalette">#message palette</a>            <a href="#else">#else</a>                      <a href="#floppyexec">#floppy</a>
<a href="#footercolor">#footer color</a>               <a href="#include">#include</a>                   <a href="#spaceexec">#space</a>
<a href="#footerhighlight">#footer highlight</a>           <a href="#includeifexist">#include_if_exist</a>          <a href="#passwordexec">#password</a>
<a href="#shadow">#shadow</a>                     <a href="#defaultplacement">#default placement</a>         <a href="#exitexec">#exit</a>
<a href="#backdropcolor">#backdrop color</a>             <a href="#defaultpalette">#default palette</a>           <a href="#logoutexec">#logout</a>
<a href="#backdropchar">#backdrop char</a>                                         <a href="#rebootexec">#reboot</a>
<a href="#backdropfile">#backdrop file</a>
<a href="#palette">#palette</a>
<a href="#cascade">#cascade</a>
<a href="#noexit">#noexit</a>
<a href="#quickselect">#quickselect</a>
<a href="#noreturn">#noreturn</a>
<a href="#notime">#notime</a>
</pre>

    <p>
        <i>External commands</i> must appear outside of normal menu structures.
        <i>Parsing commands</i> affect how menu scripts are read. <i>Execution
            commands</i> are used only within the executable text of an option
        and must be indented with spaces or tabs.
    </p>

    <pre>
    ; A simple DoMenu

    %My First Menu
    My First Option
      echo The first option was chosen
      pause
    Launch a new menu
      %another menu
    Subtitle Option
    Wordperfect
      c:
      cd wp51
      wp.exe

    %Another Menu
    Its Items
      echo This is a sub-menu
      pause
</pre>

    <p>
        Notice that the second option ('Subtitle Option') is not followed by
        any indented text. When this is the case, the option will not be
        selectable and its name will be displayed as a subtitle in the menu
        window when the menu structure is displayed. Opening sub-menu windows
        can be recursed and/or nested up to 10 levels deep.
    </p>


    <h3>PARSING COMMANDS</h3>
    <p>
        The action of these commands depends on their placement within the
        script.
    </p>

    <a name="menutitle"></a><code>%MenuTitle
        [,&lt;x_position&gt;,&lt;y_position&gt;,&lt;palette_number&gt;]</code>
    <p>
        Parameters can be used after a menu title to change the location and
        the color palette used when displaying a menu window. These parameters
        are offset from the menu title with commas. To center a menu window
        with respect to an axis, use 255 as the placement value. DoMenu will
        reposition menu windows so that they do not cover the header box and
        are not off the screen.
    </p>
    <p>
        DoMenu has 10 palettes numbered 0 through 9. These palettes can be
        redefined with the special external command '<i>#palette</i>'. Palettes
        8 and 9 are used for monochrome displays. If DoMenu is run using a
        monochrome display, it will use these two palette and ignore attempt to
        change the palette.
    </p>
    <p>
        The maximum number of entries a menu can hold is eight less than the
        number of lines on screen. A 25-line screen can display 17 entries.
    </p>

    <a name="semicolon"></a><code>;</code> (semi-colon)
    <p>
        Any text following after a semicolon on one line that is not in
        quotations will be treated as a comment and ignored by the parser. This
        can cause trouble with the dos "path" and "assign" commands. Use the
        <i>#nocomments</i> and <i>#comments</i> commands as a work-around.
    </p>

    <a name="nocomments"></a><code>#nocomments</code>
    <p>
        Normally, any characters after a semi-colon in a line will be ignored.
        Once this command is parsed, semicolons will be treated as normal text
        and not used a comments.
    </p>

    <a name="comments"></a><code>#comments</code>
    <p>
        This command restores the default behavior of semicolons.
    </p>

    <a name="if"></a><code>#if &lt;string&gt; [!][=] [&lt;string&gt;]</code>
    <ul>
        <li> <code>#if &lt;string&gt; == &lt;string&gt;</code>
            The parser will continue parsing the menu script if the two strings
            are identical after all environment variables are resolved.
            Otherwise all text will be skipped until the corresponding #endif
            is found.
        </li>

        <li> <code>#if &lt;string&gt; != &lt;string&gt;</code>
            As above except the parser will continue parsing only if the two
            string are not equal after the environment variables are resolved.
        </li>
        <li> <code>#if &lt;string&gt;</code>
            Will continue parsing the menu script if the string contains any
            text after all of the environment variables are resolved. Otherwise
            the parser will skip to the corresponding <i>#endif</i>.
        </li>
    </ul>
    <p>
        All of these conditions are evaluated as the script is being read. No
        DoMenu variables created with the #ask command can be used. "#If"
        statements can be nested up to 255 levels deep.
    </p>


    <a name="ifmember"></a><code>#if_member
        [!][servername/]&lt;group&gt;</code>
    <p>
        This is a Novell-related feature and is not implemented.
        <i>#if_member</i> will always return false.
    </p>

    <a name="ifusername"></a><code>#if_username
        [!][servername/]&lt;username&gt;</code>
    <p>
        This is a Novell-related feature and is not implemented.
        <i>#if_username</i> will always return false.
    </p>

    <a name="endif"></a><code>#endif</code>
    <p>
        This is used to end an <i>#if</i> statement.
    </p>

    <a name="else"></a><code>#else</code>
    <p>
        If the last <i>#if</i> statement failed, this will allow parsing to
        continue from this point on. If the last <i>#if</i> statement passed,
        then this will make the parser stop parsing the script until the next
        #endif statement is found.
    </p>

    <a name="include"></a><code>#include = &lt;filename&gt;[.mnu]</code>
    <p>
        Causes the text of the specified file to be parsed at this point as if
        it were part of the primary script. This command can be nested, but do
        not nest scripts more than five levels deep.
    </p>

    <a name="includeifexist"></a><code>#include_if_exist =
        &lt;filename&gt;[.mnu]</code>
    <p>
        Similar to <i>#include</i> except no error message will be generated if
        the file cannot be found.
    </p>

    <a name="defaultplacement"></a><code>#default placement =
        &lt;X_Position&gt;,&lt;Y_Position&gt;</code>
    <p>
        This option sets the default placement of the upper left corner of all
        menus parsed after this statement. A position value of 255 will cause
        windows to be centered with respect to the corresponding axis. Place
        this at the top of a script to affect all menu structures.
    </p>

    <a name="defaultpalette"></a><code>#default palette =
        &lt;palette_number&gt;</code>
    <p>
        The palette number changes the default palette for any menu structures
        parsed after this point in the script. This statement will be ignored
        on computers with monochrome display adapters. Place this at the top of
        a script to affect all menu structures.
    </p>






    <h3>EXTERNAL COMMANDS</h3>

    <p>
        It is recommended that all external commands be placed at the top of
        the script to avoid confusion, although they can be placed in between
        menu structures.
    </p>

    <a name="display"></a><code>#display[,&lt;x_position&gt;,&lt;y_position&gt;,&lt;palette_number&gt;]<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"
    </code>
    <p>
        This will display a text box on top of the backdrop but behind the
        first menu window. Once displayed, boxes created with this command are
        inert. The display box will size itself according to the longest line
        of text. Environment variables can be in the text. DoMenu Variables
        cannot be used in these external structures.
    </p>

    <a name="fn"></a><code>#f&lt;number&gt; = &lt;string&gt;</code>
    <p>
        Define an action for a function key. The number is the number of the
        function key ( 1-10 ) and the string afterwards will be its title when
        it is displayed on the footer bar. The footer bar is not displayed if
        no function keys are assigned actions with this command. This command
        should be followed with lines of indented text which will be executed
        if the function key is pressed while the menu screen is displayed.
    </p>

    <a name="key"></a><code>#key &lt;key_code&gt;,[&lt;key_code&gt;]</code>
    <p>
        Define an action for a key. The key codes refer to the dos key codes
        for the key that is to be assigned an action. If the code is 0, it
        should be followed by another number which corresponds to an extended
        key code. This structure should be followed by indented text which will
        determine the action of this hot key.
    </p>

    <a name="timer"></a><code>#timer [= &lt;minutes&gt;]</code>
    <p>
        Create an action that will occur should there be no user input for a
        given amount of time while DOMENU.EXE is running. The default time is
        10 minutes if no time is specified in the script. If this structure is
        followed by lines of indented text, those lines will determine the
        action that will be taken if there is no user input for the specified
        amount of time while the menu is displayed. If this structure is not
        followed by lines of indented text, DoMenu will automatically enter a
        screen saver mode when the timer expires. The screen will be blanked
        and the time and date will be moved around the screen at one minute
        intervals.
    </p>

    <a name="savermessage"></a><code>#saver message = &lt;string&gt;</code>
    <p>
        The string that is specified in this statement will replace the time
        and date for the built in screen saver.
    </p>

    <a name="headermessage"></a><code>#header message = &lt;string&gt;</code>
    <p>
        The string in this statement will replace the DoMenu version in the
        header box.
    </p>

    <a name="headerpalette"></a><code>#header palette =
        &lt;palette_number&gt;</code>
    <p>
        The palette number changes the selected palette for the header box. The
        default header palette is 1. This statement will be ignored on
        computers with monochrome display adapters.
    </p>

    <a name="errorpalette"></a><code>#error palette =
        &lt;palette_number&gt;</code>
    <p>
        The palette number changes the default palette for any error boxes. The
        default error palette is 2. This statement will be ignored on computers
        with monochrome display adapters.
    </p>

    <a name="messagepalette"></a><code>#message palette =
        &lt;palette_number&gt;</code>
    <p>
        The palette number changes the default palette for message boxes
        created by the <i>#display</i> command or any other non-error related
        message boxes. The default message palette is 3. This statement will be
        ignored on computers with monochrome display adapters.
    </p>

    <a name="footercolor"></a><code>#footer color =
        &lt;background_color&gt;,&lt;foreground_color&gt;</code>
    <p>
        These two colors change the foreground and background of the footer
        line at the bottom of the screen. This footer line will only be
        displayed if function keys are assigned with the
        "<i>#f&lt;number&gt;</i>" commands.
    </p>

    <a name="footerhighlight"></a><code>#footer highlight =
        &lt;background_color&gt;,&lt;foreground_color&gt;</code>
    <p>
        These two colors define the color of an item on the footer bar if it is
        highlighted due by the mouse cursor. This footer line will only be
        displayed if function keys are assigned with the
        "<i>#f&lt;number&gt;</i>" commands.
    </p>

    <a name="shadow"></a><code>#shadow [=
        &lt;background_color&gt;,&lt;foreground_color&gt;]</code>
    <p>
        This command will cause the active window on the screen to have a
        shadow on the right and bottom side. The optional color parameters can
        be used to change the color of the shadow. The default color for the
        shadow is grey on black.
    </p>

    <a name="backdropcolor"></a><code>#backdrop color =
        &lt;background_color&gt;,&lt;foreground_color&gt;</code>
    <p>
        This command can be used to change the color of the backdrop
        characters.
    </p>

    <a name="backdropchar"></a><code>#backdrop char = &lt;char_code&gt;</code>
    <p>
        This command can be used to change the character that is displayed in
        the backdrop. Try using a value of 1 for an interesting effect.
    </p>

    <a name="backdropfile"></a><code>#backdrop file = &lt;filename&gt;</code>
    <p>
        This command can be used to display an ASCII or ANSI text file as a
        background.
    </p>

    <a name="palette"></a><code>#palette &lt;palette_number&gt; = MenuBG,
        TextFG, TitleFG, BorderFG, HighlightedBorderFG, SelectedItemBG,
        SelectedItemFG</code>
    <p>
        This is used to generate custom color palettes. The seven colors are
        entered as numbers from the <a href="#colorlist">Color List</a>. The
        values must be placed on the same line as the <i>#palette</i> statement.
    </p>

    <a name="cascade"></a><code>#cascade [=
        &lt;X_vector&gt;,&lt;Y_vector&gt;]</code>
    <p>
        This changes the default placement to 10,5 and causes all menus to be
        'stair stepped' or cascaded down from that location. The x_vector and
        y_vector determine how far each window will be offset from the previous
        menu window. The default vector is 4,1. This command can be followed by
        "<i>#default placement</i>" to change the default position from 10,5.
    </p>

    <a name="noexit"></a><code>#noexit</code>
    <p>
        Prevents exiting the menu system via the escape key.
    </p>

    <a name="quickselect"></a><code>#quickselect</code>
    <p>
        Causes the items in menu windows to be displayed in an enumerated
        fashion. The items in windows can then be selected and executed by
        pressing the number which corresponds to the item.
    </p>

    <a name="noreturn"></a><code>#noreturn</code>
    <p>
        Normally, after an action which requires a batch file is executed, the
        menu script is parsed again and all windows that were open when the
        item was executed are reopened. This command prevents the reopening of
        windows when the computer returns to the menu program and the user is
        left at the root menu.
    </p>

    <a name="notime"></a><code>#notime</code>
    <p>
        Prevents the time and date from being displayed in the header box. The
        time and date will still be used in the default screen saver message.
    </p>



    <h3>EXECUTION COMMANDS</h3>
    <p>
        Execution commands are used only within the executable text of an
        option, and must be indented with spaces or tabs.
    </p>
    The Point of No Return:
    <p>
        When executing an option from a DoMenu menu script, there is a
        certain point at which the parsing of the executable text changes. At
        this point, DoMenu decides whether or not it is necessary to make a
        temporary batch file. Once the parser decides to make a temporary batch
        file, all special execution commands will be ignored and dumped into
        the batch file as straight text except for the #if commands and the
        #exit command. This means that you cannot execute a dos command such as
        "dir", and then open a query box. Once a dos command is seen, this
        point has been reached.
    </p>
    DoMenu Variables and Environment variables:
    <p>
        These can only be used in the execution portion of a script or in some
        special external commands. This means that you cannot use an
        environment variable to name a menu, while you can use them for a
        screen saver message or for a #display box. DoMenu variables can be
        used just like environment variables. Place the name inside '%'
        characters, and the value of the variable will be substituted in place
        of the name and the encapsulating '%'. Up to 10 DoMenu variables can
        be assigned in the course of one option's executable text.
    </p>

    <a name="ifexec"></a><code>#if &lt;string&gt; [!][=]
        [&lt;string&gt;]</code><br>
    <a name="ifmemberexec"></a><code>#if_member
        [!][servername/]&lt;group&gt;</code><br>
    <a name="ifusernameexec"></a><code>#if_username
        [!][servername/]&lt;username&gt;</code><br>
    <a name="endifexec"></a><code>#endif</code><br>
    <a name="elseexec"></a><code>#else</code><br>
    <p>
        All of these function work when indented in an executable option but
        instead of controlling the parsing of the menu script, they control
        what statements get executed, or once the temporary batch file has
        begun being written, they control what is written to the temporary
        batch file. Also, these #if statement can use DoMenu variables
        created in the same option's indented executable text.
        <i>#if_member</i> and <i>#if_username</i> are Novell-related features
        and are not implemented; they will always return false.
    </p>

    <a name="displayexec"></a><code>#display[,&lt;x_position&gt;,&lt;y_position&gt;,&lt;palette_number&gt;]<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"<br>
        &nbsp;&nbsp;&nbsp;"Text to be displayed"
    </code>
    <p>
        This will display a text box when executed. Execution will pause at
        this point until a key is struck. If escape or the right mouse button
        is pressed, execution will stop at this command and the user will go
        back to the menu window. If any other key is pressed, the execution
        continues normally. The window will size itself according to the
        longest line of text. DoMenu Variables and Environment variables can
        be used in the text.
    </p>

    <a name="ask1exec"></a><code>#ask
        &lt;variable_name&gt;,&lt;string&gt;,[,&lt;x_pos&gt;,&lt;y_pos&gt;,&lt;palette_number&gt;]<br>
        &nbsp;&nbsp;&nbsp;"regular option with string assignment" = stuff<br>
        &nbsp;&nbsp;&nbsp;"regular option with empty assignment" =<br>
        &nbsp;&nbsp;&nbsp;"a non-selectable subtitle"
    </code>
    <p>
        Creates a window which resembles a menu window. The string will be the
        window's title. The text in quotes will be the options. When the user
        chooses an option, the text after the equal sign for the selected
        option will be assigned to the DoMenu variable which is names in the
        top line. DoMenu variables and Environment variables can be used in
        the title or options in the query window. Any DoMenu variables that
        are assigned with this statement only hold their values during the
        execution of this statement. If a DoMenu variable is assigned and
        then following this a new menu window is opened, the value will be
        lost. Up to 10 DoMenu variables can be assigned in the course of one
        option's executable text.
    </p>

    <a name="ask2exec"></a><code>#ask
        &lt;variable_name&gt;,&lt;string&gt;[,&lt;x_pos&gt;,&lt;y_pos&gt;,&lt;palette_number&gt;]</code>
    <p>
        Creates a window which prompts the user to input a text string. The
        string will be the title of the window. The text received in this
        window will be assigned to the variable name. DoMenu variables and
        Environment variables can be used in the title. Any DoMenu variables
        that are assigned with this statement only hold their values during the
        execution of this statement. If a DoMenu variable is assigned and
        then following this a new menu window is opened, the value will be
        lost. Up to 10 DoMenu variables can be assigned in the course of one
        option's executable text.
    </p>

    <a name="floppyexec"></a><code>#floppy &lt;variable_name&gt;</code>
    <p>
        Searches through all floppy drives to find one with a formatted disk in
        it. The drive letter with a colon will by placed in the DoMenu
        variable.
    </p>

    <a name="spaceexec"></a><code>#space &lt;drive&gt; &lt;number&gt;</code>
    <p>
        Checks a specified drive for a specified number of free bytes in K. So
        a value of 10 would mean to check for 10k free. If there is sufficient
        free space, the execution will continue past this command. If it is
        not, the user is informed of the lack of drive space and returned to
        the menu. If there is an error accessing the drive, this statement will
        always fail.
    </p>

    <a name="passwordexec"></a><code>#password &lt;string&gt;</code>
    <p>
        The user is requested to enter a password. If the password is
        incorrect, the user is informed and returned to the menu. If it is
        correct, the execution of the item continues. Do not put in an equal
        sign.
    </p>

    <a name="exitexec"></a><code>#exit</code>
    <p>
        When this command is encountered, either the user is returned to DOS,
        or all batch file commands before this point are executed and then the
        user is returned to DOS.
    </p>

    <a name="logoutexec"></a><code>#logout</code>
    <p>
        The user is logged out of all novell servers. This will not exit users
        from the menu. Execution will continue after this command.
    </p>

    <a name="rebootexec"></a><code>#reboot</code>
    <p>
        This will immediately reboot the computer without creating a batch
        file.
    </p>



    <h3>DEFINITIONS</h3>
    <ul>
        <li><code>&lt;palette_number&gt;</code>: a value between 0-9</li>
        <li><code>&lt;foreground_color&gt;</code>: a number from 1 - 15 from
            the <a href="#colorlist">Color List</a>.</li>
        <li><code>&lt;background_color&gt;</code>: a number from 0 - 7 from the
            <a href="#colorlist">Color List</a>.</li>
        <li><code>&lt;key_code&gt;</code>: a number between 0-255 which
            corresponds to a IBM keyboard scan code.</li>
        <li><code>&lt;char_code&gt;</code>: a number between 0-255 which
            corresponds to an IBM screen display code.</li>
        <li><code>&lt;X_Position&gt;</code>: a number between 0-255 which will
            determine the horizontal position of the upper left corner of a
            DoMenu window. If it is 255, the window will be centered.</li>
        <li><code>&lt;X_Vector&gt;</code>: a number between 0-255 which will
            determine how far a way the next default window will be located
            from the currently opened window.</li>
    </ul>


    <a name="colorlist"></a>
    <h3>COLOR LIST</h3>
    <pre>
    0 - black         8  - dark grey
    1 - blue          9  - lt. blue
    2 - green         10 - lt. green
    3 - cyan          11 - lt. cyan
    4 - red           12 - lt. red
    5 - magenta       13 - lt. magenta
    6 - brown         14 - yellow
    7 - lt.grey       15 - white
</pre>


<p>
    See also: PGME, DN2, TOPSPIN, FDSHELL
</p>

</body>

</html>
